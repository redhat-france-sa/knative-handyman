<?xml version="1.0" encoding="UTF-8" ?>
<routes xmlns="http://camel.apache.org/schema/spring" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://camel.apache.org/schema/spring https://camel.apache.org/schema/spring/camel-spring-3.8.0.xsd">

    <!-- This route receives rendering request through HTTP with CloudEvents -->
    <route id="http-receiver">
        <from uri="platform-http:/"/>
        <convertBodyTo type="java.lang.String"/>
        <log message="Message received from HTTP : ${body}"/>
        <removeHeaders pattern="*"/>
        <to uri="direct:render-area"/>
        <setBody>
            <constant>ok</constant>
        </setBody>
    </route>

    <route>
        <from uri="platform-http:/dummy"/>
        <setBody>
            <constant>test</constant>
        </setBody>
        <to uri="file:{{blenderqueue.blend.files.folder}}"/>
        <setBody>
            <constant>test</constant>
        </setBody>
        <log message="done"/>
    </route>

    <!-- This route receives rendering request through Kafka -->
    <!-- <route id="kafka-receiver">
        <from uri="kafka:rendering-requests?brokers={{kafkabroker}}&amp;groupId=renderers"/>
        <log message="Message received from Kafka : ${body}"/>
        <to uri="direct:render-area"/>
    </route> -->

    <!-- This route is called either by HTTP or Kafka entry points -->
    <route id="render-area">
        <from uri="direct:render-area"/>
        <log message="Body should be a java.lang.String: ${body.class}"/>
        <unmarshal>
            <json library="Jackson"/>
        </unmarshal>
        <setProperty name="origBody">
            <simple>${body}</simple>
        </setProperty>


        <wireTap pattern="inOnly" uri="kafka:rendering-status?brokers={{kafkabroker}}&amp;groupId=renderers">
            <body>
                  <simple>
                    {
                        "areaX" : "${exchange.properties[origBody]['areaX']}",
                        "areaY" : "${exchange.properties[origBody]['areaY']}",
                        "fileName" : "${exchange.properties[origBody]['objectKey']}",
                        "status" : "received",
                        "timestamp": "${date:now:yyyyMMdd-HH:mm:ss}"
                    }
                  </simple>
            </body>
        </wireTap>

        <log message="Body now should be a java.util.Map:  ${body.class}"/>
        <log message="Preparing rendering, retrieving ${body['objectKey']}"/>
        <setHeader name="CamelAwsS3Key">
            <simple>${body['objectKey']}</simple>
        </setHeader>
        <setHeader name="CamelFileName">
            <simple>${header.CamelAwsS3Key}</simple>
        </setHeader>
        

        
        <toD uri="http://{{fileserverurl}}/${header.CamelAwsS3Key}?httpMethod=GET&amp;disableStreamCache=true"/>
        
        <log message="downloaded"/>
         <to uri="file:{{blenderqueue.blend.files.folder}}"/>
        <setBody>
            <simple>
                {
                    "fileName": "${headers.CamelFileName}"
                }
            </simple>
        </setBody>
        <removeHeaders pattern="*"/>
        <log message="${body}"></log>
        <to uri="http:{{rendering.local.blender.api}}/open?httpMethod=POST"/>

        <setBody>
            <simple>
                {
                    "outputPrefix" : "${exchange.properties[origBody]['renderingId']}",
                    "resolutionX" : ${exchange.properties[origBody]['resolutionX']},
                    "resolutionY" : ${exchange.properties[origBody]['resolutionY']},
                    "samples" : ${exchange.properties[origBody]['samples']},
                    "frameDivider" : ${exchange.properties[origBody]['frameDivider']},
                    "areaX" : ${exchange.properties[origBody]['areaX']},
                    "areaY" : ${exchange.properties[origBody]['areaY']}
                }
            </simple>
        </setBody>

        <wireTap pattern="inOnly" uri="kafka:rendering-status?brokers={{kafkabroker}}&amp;groupId=renderers">
            <body>
                  <simple>
                    {
                        "areaX" : "${exchange.properties[origBody]['areaX']}",
                        "areaY" : "${exchange.properties[origBody]['areaY']}",
                        "fileName" : "${exchange.properties[origBody]['objectKey']}",
                        "status" : "starting",
                        "timestamp": "${date:now:yyyyMMdd-HH:mm:ss}"
                    }
                  </simple>
            </body>
        </wireTap>

        <to uri="http:{{rendering.local.blender.api}}/render-region?httpMethod=POST"/>

        <wireTap pattern="inOnly" uri="kafka:rendering-status?brokers={{kafkabroker}}&amp;groupId=renderers">
            <body>
                  <simple>
                    {
                        "areaX" : "${exchange.properties[origBody]['areaX']}",
                        "areaY" : "${exchange.properties[origBody]['areaY']}",
                        "fileName" : "${exchange.properties[origBody]['objectKey']}",
                        "status" : "rendered",
                        "timestamp": "${date:now:yyyyMMdd-HH:mm:ss}"
                    }
                  </simple>
            </body>
        </wireTap>

        <unmarshal>
            <json library="Jackson" />
        </unmarshal>
        <log message="${body}"/>
        <setHeader name="filename">
            <simple>${body[filePath]}</simple>
        </setHeader>
        <setBody>
            <method ref="helper" method="getLocalPictureAsStream"/>
        </setBody>
        <removeHeader headerName="Content-Type"/>
        <log message="${headers}"/>
        <toD uri="http:{{uploadserverurl}}/upload/${header.filename}?httpMethod=POST"/>

        <setHeader name="computedXY">
            <method ref="helper" method="imageDataFromPng"/>
        </setHeader>

        <setBody>
            <simple>
                {
                    "areaX" : ${header.computedXY[areaX]},
                    "areaY" : ${header.computedXY[areaY]},
                    "fileName" : "${exchange.properties[origBody]['objectKey']}",
                    "result" : "/renders/tiles/${headers.filename}",
                    "timestamp": "${date:now:yyyyMMdd-HH:mm:ss}"
                }
              </simple>
        </setBody>
        <log message="${body}"/>
        <to uri="kafka:rendering-results?brokers={{kafkabroker}}"/>
    </route>
</routes>